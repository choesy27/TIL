[ 수업 목표 ]
1. 트리, 힙의 개념과 활용법에 대해 배운다.
2. 그래프, BFS, DFS에 대해 배워보자.
3. Dynamic Programming의 개념과 그 필요성을 배워보자.

〈트리〉
- 비선형 구조: 데이터가 계층적 혹은 망으로 구성되어 있다.
- 트리의 종류: 이진 트리, 이진 탐색 트리, 균형 트리(AVL 트리, red-black 트리), 이진 힙(최대힙, 최소힙) 등
- 이진 트리(Binary Tree)의 특징
	ㆍ각 노드가 최대 두 개의 자식을 가진다.
	ㆍ노드를 삽입할 때 최하단의 왼쪽 노드부터 차례로 삽입해야 한다.

>> 트리에서 나오는 용어
ㆍNode: 트리에서 데이터를 저장하는 기본 요소
ㆍRoot Node: 트리 맨 위에 있는 노드
ㆍLevel: 최상위 노드를 Level 0으로 했을 때, 하위 Branch로 연결된 노드의 깊이를 나타냄.
ㆍParent Node: 어떤 노드의 상위 레벨에 연결된 노드
ㆍChild Node: 어떤 노드의 하위 레벨에 연결된 노드
ㆍLeaf Node(Terminal Node): Child Node가 하나도 없는 노드
ㆍSibling: 동일한 Parent Node를 가진 노드
ㆍDepth: 트리에서 Node가 가질 수 있는 최대 Level

- 트리 구조를 표현하는 방법
	ㆍ직접 클래스를 구현해서 사용하는 방법
	ㆍ배열로 표현하는 방법 --> '완전 이진 트리'를 쓰는 경우에 사용 가능

〈완전 이진 트리(Complete Binary Tree)〉
- 왼쪽부터 데이터가 쌓인다.
- 트리의 높이(Height): 루트 노드부터 가장 아래 리프 노드까지의 길이
- 넣은 순서를 쌓아두므로 되돌리기 기능과 같은 일련의 행동을 순서대로 기억해야 할 때 사용한다.
- O(log(N))

〈힙〉
- 데이터에서 최댓값과 최솟값을 빠르게 찾기 위해 고안된 완전 이진 트리
- 항상 큰 값이 상위 레벨에 있고 작은 값이 하위 레벨에 있도록 하는 자료 구조로, 부모 노드의 값이 자식 노드의 값보다 항상 커야 한다.

〈그래프〉
>> 그래프에서 사용되는 용어
ㆍNode(노드): 연결 관계를 가진 각 데이터를 의미한다. Vertex(정점)이라고도 한다.
ㆍEdge(간선): 노드 간의 관계를 표시한 선
ㆍAdjacent Node(인접 노드): 간선으로 직접 연결된 노드(또는 정점)

- 유방향 그래프(Directed Graph): 방향이 있는 간선을 갖는다. 간선은 단방향 관계를 나타내며, 각 간선은 한 방향으로만 진행할 수 있다.
- 무방향 그래프(Undirected Graph): 방향이 없는 간선을 갖는다.
- 표현하는 방법
	ㆍ인접 행렬(Adjacency Matrix): 2차원 배열로 그래프의 연결 관계를 표현
	ㆍ인접 리스트(Adjacency List): 링크드 리스트로 그래프의 연결 관계를 표현

- 인접 행렬로 표현하면 즉각적으로 연결되었는지 여부를 바로 알 수 있지만, 모든 연결 여부를 저장해야 하므로 O((노드)^2)만큼의 공간을 사용해야 한다.
- 인접 리스트로 표현하면 즉각적으로 연결되었는지 알 수 없고 각 리스트를 돌아봐야 하므로 연결 여부를 알기 위해 최대 O(간선)만큼의 시간을 사용해야 하지만, 모든 조합의 연결 여부를 저장할 필요가 없어 O(노드+간선)만큼의 공간을 사용하면 된다.

〈DFS〉
- Depth First Search
- 자료의 검색, 트리나 그래프를 탐색하는 방법. 한 노드를 시작으로 인접한 다른 노드를 재귀적으로 탐색해가고 끝까지 탐색하면 다시 위로 와서 다음을 탐색하여 검색한다. [컴퓨터인터넷IT용어대사전]
- 그래프 최대 깊이만큼의 공간을 요구하므로 공간을 적게 사용하지만 최단 경로를 탐색하기 어렵다.

〈BFS〉
- 한 노드를 시작으로 인접한 모든 정점들을 우선 방문하는 방법. 더이상 방문하지 않은 정점이 없을 때까지 방문하지 않은 모든 정점들에 대해서도 넓이 우선 검색을 적용한다. [컴퓨터인터넷IT용어대사전]
- 최단 경로를 쉽게 찾을 수 있지만 모든 분기되는 수를 다 저장하므로 공간을 많이 쓰고, 시간이 더 오래걸린다.

〈Dynamic Programming〉
- 동적 계획법
- 복잡한 문제를 간단한 여러 개의 문제로 나누어 푸는 방법.
- 여러 개의 하위 문제를 풀어 그 결과를 기록하고 기록을 이용하여 문제를 해결하는 알고리즘

>> 용어 정리
ㆍMemoization(메모이제이션): 결과를 기록하는 것
ㆍOverlapping Subproblem(겹치는 부분 문제): 문제를 쪼갤 수 있는 구조